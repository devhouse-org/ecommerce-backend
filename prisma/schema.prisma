// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String              @id @default(uuid())
  email            String              @unique
  image            String? // Changed from Bytes? to String?
  role             Roles               @default(USER)
  password         String
  name             String?
  phone            String?
  points           Int                 @default(0)
  orders           Order[]
  ratings          Rating[]
  favoriteProducts FavoriteProduct[]
  auctions         AuctionSubscriber[]
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
}

model Product {
  id               String            @id @default(uuid())
  name             String
  description      String?
  price            Float
  image            String? //  base64 string
  category         Category[]
  ratings          Rating[]
  orderItems       OrderItem[]
  favoriteProducts FavoriteProduct[]
  auctions         Auction[]
  variants         Variant[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model AuctionSubscriber {
  id        String   @id @default(uuid())
  price     Float
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  auctionId String
  auction   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Auction {
  id          String              @id @default(uuid())
  subscribers AuctionSubscriber[]
  productId   String              @unique
  product     Product             @relation(fields: [productId], references: [id], onDelete: Cascade)
  startPrice  Float
  endPrice    Float
  endTime     DateTime
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
}

model Variant {
  id        String  @id @default(uuid())
  name      String
  image     String?
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  values    Value[]
}

model Value {
  id        String  @id @default(uuid())
  name      String
  image     String?
  price     String?
  variantId String
  variant   Variant @relation(fields: [variantId], references: [id], onDelete: Cascade)
}

model Rating {
  id        String   @id @default(uuid())
  score     Int
  comment   String?
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FavoriteProduct {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Order {
  id          String      @id @default(uuid())
  userId      String
  phoneNumber String
  name        String?
  email       String?
  address     String
  user        User        @relation(fields: [userId], references: [id])
  total       Float
  orderItems  OrderItem[]
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Roles {
  ADMIN
  USER
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}
